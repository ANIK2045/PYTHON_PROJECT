# Tic-Tac-Toe game with AI using Minimax algorithm

# Initialize an empty 3x3 Tic-Tac-Toe board
def initialize_board():
    return [[' ' for _ in range(3)] for _ in range(3)]

# Function to print the Tic-Tac-Toe board
def print_board(board):
    for row in board:
        print('| ' + ' | '.join(row) + ' |')
        print('-------------')
    print()

# Function to check if a player has won
def check_winner(board, player):
    # Check rows, columns, and diagonals for a win
    for i in range(3):
        if all(board[i][j] == player for j in range(3)):
            return True
        if all(board[j][i] == player for j in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)):
        return True
    if all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

# Function to evaluate the current board state
def evaluate(board):
    if check_winner(board, 'X'):
        return 1  # AI wins
    elif check_winner(board, 'O'):
        return -1  # Human wins
    else:
        return 0  # Draw

# Minimax function with alpha-beta pruning
def minimax(board, depth, maximizing_player):
    if check_winner(board, 'X'):
        return 1
    elif check_winner(board, 'O'):
        return -1
    elif depth == 0 or all(board[i][j] != ' ' for i in range(3) for j in range(3)):
        return 0
    
    if maximizing_player:
        max_eval = -float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    eval = minimax(board, depth - 1, False)
                    board[i][j] = ' '
                    max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    eval = minimax(board, depth - 1, True)
                    board[i][j] = ' '
                    min_eval = min(min_eval, eval)
        return min_eval

# Function for AI to make a move
def ai_move(board):
    best_eval = -float('inf')
    best_move = None
    
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'
                eval = minimax(board, 5, False)  # Adjust depth as needed
                board[i][j] = ' '
                
                if eval > best_eval:
                    best_eval = eval
                    best_move = (i, j)
    
    board[best_move[0]][best_move[1]] = 'X'

# Main function to play Tic-Tac-Toe
def play_game():
    board = initialize_board()
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)
    
    while True:
        # Human player's move
        while True:
            try:
                x, y = map(int, input("Enter your move (row and column, e.g., 1 1 for middle): ").split())
                if board[x][y] == ' ':
                    board[x][y] = 'O'
                    break
                else:
                    print("That spot is already taken! Try again.")
            except ValueError:
                print("Invalid input! Please enter two integers.")
            except IndexError:
                print("Invalid input! Please enter valid row and column (0-2).")
        
        print_board(board)
        
        # Check if human player wins
        if check_winner(board, 'O'):
            print("Congratulations! You win!")
            break
        
        # Check for draw
        if all(board[i][j] != ' ' for i in range(3) for j in range(3)):
            print("It's a draw!")
            break
        
        # AI player's move
        print("AI is thinking...")
        ai_move(board)
        print("AI's move:")
        print_board(board)
        
        # Check if AI wins
        if check_winner(board, 'X'):
            print("AI wins! Better luck next time.")
            break

# Entry point of the script
if __name__ == "__main__":
    play_game()
